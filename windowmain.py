# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'windowmain.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import cv2
import math
import os
import numpy as np
from matplotlib import pyplot as plt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QFileDialog, QMessageBox,QApplication
from PyQt5.QtGui import QImage, QPixmap
from de import detect_thread

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("这就是“头号玩家”——图像处理器")
        MainWindow.resize(1319, 785)
        MainWindow.setStyleSheet("QMainWindow{\n"
"background-image: url(C:/Users/86150/Desktop/PS图像处理/images/bgg.jpg);\n"
"}\n"
"QPushButton{\n"
"border-radius:10px;\n"
"/*color: rgb(255, 255, 255);*/\n"
"background-color: rgb(255, 255, 255);\n"
"border:2px solid rgb(0,0,0);\n"
"outline: none;\n"
"}\n"
"QPushButton:pressed{\n"
"background-color: rgb(204, 204, 215);\n"
"}\n"
"QPushButton:disabled{\n"
"background-color: rgb(167, 164, 170);\n"
"}\n"
"QSlider::handle:vertical{\n"
"color:black;\n"
"}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(70, 480, 255, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_20 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_20.setGeometry(QtCore.QRect(700, 620, 255, 23))
        self.pushButton_20.setObjectName("pushButton_20")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 401, 401))
        self.groupBox.setStyleSheet("background-color: rgba(255, 255, 255, 100);")
        self.groupBox.setObjectName("groupBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(10, 20, 371, 361))
        self.label.setLineWidth(43)
        self.label.setText("")
        self.label.setObjectName("label")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(440, 10, 771, 591))
        self.groupBox_2.setStyleSheet("background-color: rgba(255, 255, 255, 100);")
        self.groupBox_2.setObjectName("groupBox_2")
        self.label_2 = QtWidgets.QLabel(self.groupBox_2)
        self.label_2.setGeometry(QtCore.QRect(10, 20, 751, 551))
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(120, 420, 171, 23))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(120, 450, 81, 21))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(120, 650, 888, 31))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(9)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("background-color: rgba(255, 255, 255,160);")
        self.label_4.setObjectName("label_4")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1319, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        self.menuxintaixue = QtWidgets.QMenu(self.menu_3)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/gamma.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuxintaixue.setIcon(icon)
        self.menuxintaixue.setObjectName("menuxintaixue")
        self.menu_4 = QtWidgets.QMenu(self.menubar)
        self.menu_4.setObjectName("menu_4")
        self.menu_5 = QtWidgets.QMenu(self.menubar)
        self.menu_5.setObjectName("menu_5")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.yun = QtWidgets.QDockWidget(MainWindow)
        self.yun.setStyleSheet("background-color: rgba(255, 255, 255,100);")
        self.yun.setObjectName("yun")
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.pushButton_3 = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 80, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_36 = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushButton_36.setGeometry(QtCore.QRect(10, 30, 75, 23))
        self.pushButton_36.setObjectName("pushButton_36")
        self.pushButton_5 = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushButton_5.setGeometry(QtCore.QRect(10, 130, 75, 23))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushButton_6.setGeometry(QtCore.QRect(10, 180, 75, 23))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_21 = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushButton_21.setGeometry(QtCore.QRect(10, 230, 75, 23))
        self.pushButton_21.setObjectName("pushButton_21")
        self.pushButton_27 = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushButton_27.setGeometry(QtCore.QRect(10, 280, 75, 23))
        self.pushButton_27.setObjectName("pushButton_27")
        self.pushButton_10 = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushButton_10.setGeometry(QtCore.QRect(10, 330, 75, 23))
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_22 = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushButton_22.setGeometry(QtCore.QRect(10, 380, 75, 23))
        self.pushButton_22.setObjectName("pushButton_22")
        self.pushButton_8 = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushButton_8.setGeometry(QtCore.QRect(10, 480, 75, 23))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_7 = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushButton_7.setGeometry(QtCore.QRect(10, 430, 75, 23))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_9 = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushButton_9.setGeometry(QtCore.QRect(10, 530, 75, 23))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_11 = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushButton_11.setGeometry(QtCore.QRect(10, 580, 75, 23))
        self.pushButton_11.setObjectName("pushButton_11")
        self.yun.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.yun)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.action_O = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/picture.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_O.setIcon(icon1)
        self.action_O.setObjectName("action_O")
        self.action_B = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_B.setIcon(icon2)
        self.action_B.setObjectName("action_B")
        self.action_H = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/gray.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_H.setIcon(icon3)
        self.action_H.setObjectName("action_H")
        self.action_S = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/素描.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_S.setIcon(icon4)
        self.action_S.setObjectName("action_S")
        self.action_Y = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("images/油漆.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Y.setIcon(icon5)
        self.action_Y.setObjectName("action_Y")
        self.action_M = QtWidgets.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("images/玻璃.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_M.setIcon(icon6)
        self.action_M.setObjectName("action_M")
        self.action_L = QtWidgets.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("images/滤镜.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_L.setIcon(icon7)
        self.action_L.setObjectName("action_L")
        self.action_M_2 = QtWidgets.QAction(MainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("images/马赛克.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_M_2.setIcon(icon8)
        self.action_M_2.setObjectName("action_M_2")
        self.action_X = QtWidgets.QAction(MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("images/chuizhi.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_X.setIcon(icon9)
        self.action_X.setObjectName("action_X")
        self.action_F = QtWidgets.QAction(MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("images/编辑_edit.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_F.setIcon(icon10)
        self.action_F.setObjectName("action_F")
        self.action_G = QtWidgets.QAction(MainWindow)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("images/多相流模型.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_G.setIcon(icon11)
        self.action_G.setObjectName("action_G")
        self.action_J = QtWidgets.QAction(MainWindow)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("images/junzhi.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_J.setIcon(icon12)
        self.action_J.setObjectName("action_J")
        self.action_Gao = QtWidgets.QAction(MainWindow)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap("images/交流滤波器.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Gao.setIcon(icon13)
        self.action_Gao.setObjectName("action_Gao")
        self.action_Y_2 = QtWidgets.QAction(MainWindow)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap("images/文档架子_document-folder.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Y_2.setIcon(icon14)
        self.action_Y_2.setObjectName("action_Y_2")
        self.action_kai = QtWidgets.QAction(MainWindow)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap("images/打开.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_kai.setIcon(icon15)
        self.action_kai.setObjectName("action_kai")
        self.action_bi = QtWidgets.QAction(MainWindow)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap("images/column-horizontal.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_bi.setIcon(icon16)
        self.action_bi.setObjectName("action_bi")
        self.action_fu = QtWidgets.QAction(MainWindow)
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap("images/fuhe.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_fu.setIcon(icon17)
        self.action_fu.setObjectName("action_fu")
        self.action_peng = QtWidgets.QAction(MainWindow)
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap("images/大成像面积.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_peng.setIcon(icon18)
        self.action_peng.setObjectName("action_peng")
        self.action_bian = QtWidgets.QAction(MainWindow)
        icon19 = QtGui.QIcon()
        icon19.addPixmap(QtGui.QPixmap("images/ens 边缘节点服务.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_bian.setIcon(icon19)
        self.action_bian.setObjectName("action_bian")
        self.action_ti = QtWidgets.QAction(MainWindow)
        icon20 = QtGui.QIcon()
        icon20.addPixmap(QtGui.QPixmap("images/梯度提升数-选中.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_ti.setIcon(icon20)
        self.action_ti.setObjectName("action_ti")
        self.action_zeng = QtWidgets.QAction(MainWindow)
        icon21 = QtGui.QIcon()
        icon21.addPixmap(QtGui.QPixmap("images/噪声.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_zeng.setIcon(icon21)
        self.action_zeng.setObjectName("action_zeng")
        self.action_bo = QtWidgets.QAction(MainWindow)
        icon22 = QtGui.QIcon()
        icon22.addPixmap(QtGui.QPixmap("images/bianyuan.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_bo.setIcon(icon22)
        self.action_bo.setObjectName("action_bo")
        self.action_nibo = QtWidgets.QAction(MainWindow)
        icon23 = QtGui.QIcon()
        icon23.addPixmap(QtGui.QPixmap("images/逆变器.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_nibo.setIcon(icon23)
        self.action_nibo.setObjectName("action_nibo")
        self.action_O_2 = QtWidgets.QAction(MainWindow)
        self.action_O_2.setIcon(icon1)
        self.action_O_2.setObjectName("action_O_2")
        self.action_B_2 = QtWidgets.QAction(MainWindow)
        self.action_B_2.setIcon(icon2)
        self.action_B_2.setObjectName("action_B_2")
        self.actionkaiyuns = QtWidgets.QAction(MainWindow)
        self.actionkaiyuns.setIcon(icon15)
        self.actionkaiyuns.setObjectName("actionkaiyuns")
        self.actionbiyuns = QtWidgets.QAction(MainWindow)
        self.actionbiyuns.setIcon(icon16)
        self.actionbiyuns.setObjectName("actionbiyuns")
        self.actionju = QtWidgets.QAction(MainWindow)
        self.actionju.setIcon(icon12)
        self.actionju.setObjectName("actionju")
        self.actiongao = QtWidgets.QAction(MainWindow)
        self.actiongao.setIcon(icon13)
        self.actiongao.setObjectName("actiongao")
        self.actionfu = QtWidgets.QAction(MainWindow)
        self.actionfu.setIcon(icon17)
        self.actionfu.setObjectName("actionfu")
        self.actionpeng = QtWidgets.QAction(MainWindow)
        self.actionpeng.setIcon(icon18)
        self.actionpeng.setObjectName("actionpeng")
        self.actionbian = QtWidgets.QAction(MainWindow)
        self.actionbian.setIcon(icon19)
        self.actionbian.setObjectName("actionbian")
        self.actionti = QtWidgets.QAction(MainWindow)
        self.actionti.setIcon(icon20)
        self.actionti.setObjectName("actionti")
        self.actionzeng = QtWidgets.QAction(MainWindow)
        self.actionzeng.setIcon(icon21)
        self.actionzeng.setObjectName("actionzeng")
        self.actionbo = QtWidgets.QAction(MainWindow)
        self.actionbo.setIcon(icon22)
        self.actionbo.setObjectName("actionbo")
        self.actionnibo = QtWidgets.QAction(MainWindow)
        self.actionnibo.setIcon(icon23)
        self.actionnibo.setObjectName("ctionnibo")
        self.actionbangzhu = QtWidgets.QAction(MainWindow)
        icon24 = QtGui.QIcon()
        icon24.addPixmap(QtGui.QPixmap("images/about.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionbangzhu.setIcon(icon24)
        self.actionbangzhu.setObjectName("actionbangzhu")
        self.actionerzhihua = QtWidgets.QAction(MainWindow)
        icon27 = QtGui.QIcon()
        icon27.addPixmap(QtGui.QPixmap("images/edit-编辑.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionerzhihua.setIcon(icon27)
        self.actionerzhihua.setObjectName("actionerzhihua")
        self.actionkoutu = QtWidgets.QAction(MainWindow)
        icon28 = QtGui.QIcon()
        icon28.addPixmap(QtGui.QPixmap("c:\\Users\\86150\\Desktop\\UI\\images/背景透明.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionkoutu.setIcon(icon28)
        self.actionkoutu.setObjectName("actionkoutu")
        self.menu.addAction(self.action_O_2)
        self.menu.addAction(self.action_B_2)
        self.menu_2.addAction(self.action_H)
        self.menu_2.addAction(self.action_S)
        self.menu_2.addAction(self.action_Y)
        self.menu_2.addAction(self.action_M)
        self.menu_2.addAction(self.action_L)
        self.menu_2.addAction(self.action_M_2)
        self.menu_2.addAction(self.action_X)
        self.menu_2.addAction(self.action_F)
        self.menu_2.addAction(self.action_G)
        self.menu_2.addAction(self.action_Y_2)
        self.menu_2.addAction(self.actionerzhihua)
        self.menu_2.addAction(self.actionkoutu)
        self.menuxintaixue.addAction(self.actionkaiyuns)
        self.menuxintaixue.addAction(self.actionbiyuns)
        self.menu_3.addAction(self.actionju)
        self.menu_3.addAction(self.actiongao)
        self.menu_3.addAction(self.menuxintaixue.menuAction())
        self.menu_3.addAction(self.actionfu)
        self.menu_3.addAction(self.actionpeng)
        self.menu_3.addAction(self.actionbian)
        self.menu_3.addAction(self.actionti)
        self.menu_3.addAction(self.actionzeng)
        self.menu_3.addAction(self.actionbo)
        self.menu_3.addAction(self.actionnibo)
        self.menu_5.addAction(self.actionbangzhu)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_4.menuAction())
        self.menubar.addAction(self.menu_5.menuAction())
        self.toolBar.addAction(self.action_O)
        self.toolBar.addAction(self.action_B)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action_J)
        self.toolBar.addAction(self.action_Gao)
        self.toolBar.addAction(self.action_kai)
        self.toolBar.addAction(self.action_bi)
        self.toolBar.addAction(self.action_fu)
        self.toolBar.addAction(self.action_peng)
        self.toolBar.addAction(self.action_bian)
        self.toolBar.addAction(self.action_ti)
        self.toolBar.addAction(self.action_zeng)
        self.toolBar.addAction(self.action_bo)
        self.toolBar.addAction(self.action_nibo)

        self.retranslateUi(MainWindow)
        self.label.setScaledContents(True)
        #旋转起始角度
        self.angle=90
        #鼠标事件
        self.en = False
        self.progressBar.setValue(0)

        self.action_O.triggered.connect(self.openImage)#打开图片
        self.pushButton.clicked.connect(self.openImage)#打开图片
        self.action_O_2.triggered.connect(self.openImage)#打开图片

        self.pushButton_36.clicked.connect(self.imageTogray) #灰度
        self.action_H.triggered.connect(self.imageTogray) #灰度

        self.pushButton_3.clicked.connect(self.Sketch)   #素描
        self.action_S.triggered.connect(self.Sketch)#素描

        self.pushButton_5.clicked.connect(self.paint) #油漆
        self.action_Y.triggered.connect(self.paint)#油漆

        self.pushButton_6.clicked.connect(self.Ground_glass) #毛玻璃
        self.action_M.triggered.connect(self.Ground_glass)

        self.pushButton_7.clicked.connect(self.relief) #浮雕
        self.action_F.triggered.connect(self.relief)#浮雕

        self.pushButton_8.clicked.connect(self.Nostalgia) #怀旧
        self.action_Y_2.triggered.connect(self.Nostalgia)

        self.pushButton_10.clicked.connect(self.rotate) #旋转
        self.action_X.triggered.connect(self.rotate)

        self.pushButton_21.clicked.connect(self.Filter)#滤镜
        self.action_L.triggered.connect(self.Filter)

        self.pushButton_22.clicked.connect(self.fleetingTime)#流年
        self.action_G.triggered.connect(self.fleetingTime)

        self.pushButton_27.clicked.connect(self.Mosaic)#马赛克
        self.action_M_2.triggered.connect(self.Mosaic)

        self.action_J.triggered.connect(self.meanFiltering)#均值滤波
        self.actionju.triggered.connect(self.meanFiltering)

        self.action_Gao.triggered.connect(self.GaussianFiltering)#高斯滤波
        self.actiongao.triggered.connect(self.GaussianFiltering)

        self.action_kai.triggered.connect(self.open)#开运算
        self.actionkaiyuns.triggered.connect(self.open)

        self.action_bi.triggered.connect(self.close)#闭运算
        self.actionbiyuns.triggered.connect(self.close)

        self.action_fu.triggered.connect(self.erode)#腐蚀
        self.actionfu.triggered.connect(self.erode)

        self.action_peng.triggered.connect(self.dilate)#腐蚀
        self.actionpeng.triggered.connect(self.dilate)

        self.action_bian.triggered.connect(self.Canny)#边缘检测
        self.actionbian.triggered.connect(self.Canny)

        self.action_ti.triggered.connect(self.gradient)#梯度运算
        self.actionti.triggered.connect(self.gradient)

        self.action_zeng.triggered.connect(self.noise)#增加噪声
        self.actionzeng.triggered.connect(self.noise)

        self.action_bo.triggered.connect(self.FourierTransform)#傅里叶变换
        self.actionbo.triggered.connect(self.FourierTransform)

        self.action_nibo.triggered.connect(self.inFourierTransform)#逆傅里叶变换
        self.actionnibo.triggered.connect(self.inFourierTransform)

        self.actionerzhihua.triggered.connect(self.change)#二值化
        self.pushButton_9.clicked.connect(self.change)

        self.actionkoutu.triggered.connect(self.grabCut)#抠图
        self.pushButton_11.clicked.connect(self.grabCut)

        self.pushButton_20.clicked.connect(self.save_image)#保存
        self.action_B.triggered.connect(self.save_image)
        self.action_B_2.triggered.connect(self.save_image)


        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "这就是“头号玩家”——图像处理器"))
        self.pushButton.setText(_translate("MainWindow", "请选择图片"))
        self.pushButton_20.setText(_translate("MainWindow", "保存处理结果"))
        self.groupBox.setTitle(_translate("MainWindow", "原图像"))
        self.groupBox_2.setTitle(_translate("MainWindow", "图像处理结果"))
        self.label_3.setText(_translate("MainWindow", "处理进度"))
        self.label_4.setText(_translate("MainWindow", "Tip：马赛克功能按S保存，Esc退出；旋转功能向右旋转90度，可多次点击旋转；二值化功能以及抠图功能和马赛克功能同理。"))
        self.menu.setTitle(_translate("MainWindow", "文件(&F)"))
        self.menu_2.setTitle(_translate("MainWindow", "基本"))
        self.menu_3.setTitle(_translate("MainWindow", "进阶"))
        self.menuxintaixue.setTitle(_translate("MainWindow", "形态学操作"))
        self.menu_4.setTitle(_translate("MainWindow", "关于(&A)"))
        self.menu_5.setTitle(_translate("MainWindow", "帮助(&H)"))
        self.yun.setWindowTitle(_translate("MainWindow", "工具"))
        self.pushButton_3.setText(_translate("MainWindow", "素描"))
        self.pushButton_36.setText(_translate("MainWindow", "灰度"))
        self.pushButton_5.setText(_translate("MainWindow", "油漆"))
        self.pushButton_6.setText(_translate("MainWindow", "毛玻璃"))
        self.pushButton_21.setText(_translate("MainWindow", "滤镜"))
        self.pushButton_27.setText(_translate("MainWindow", "马赛克"))
        self.pushButton_10.setText(_translate("MainWindow", "旋转"))
        self.pushButton_22.setText(_translate("MainWindow", "流年"))
        self.pushButton_8.setText(_translate("MainWindow", "怀旧"))
        self.pushButton_7.setText(_translate("MainWindow", "浮雕"))
        self.pushButton_9.setText(_translate("MainWindow", "二值化"))
        self.pushButton_11.setText(_translate("MainWindow", "抠图"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "高阶工具栏"))
        self.action_O.setText(_translate("MainWindow", "打开(&O)"))
        self.action_O.setToolTip(_translate("MainWindow", "打开(O)"))
        self.action_O.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.action_B.setText(_translate("MainWindow", "保存(&B)"))
        self.action_B.setToolTip(_translate("MainWindow", "保存(B)"))
        self.action_B.setShortcut(_translate("MainWindow", "Ctrl+B"))
        self.action_H.setText(_translate("MainWindow", "灰度"))
        self.action_H.setToolTip(_translate("MainWindow", "灰度"))
        self.action_S.setText(_translate("MainWindow", "素描"))
        self.action_S.setToolTip(_translate("MainWindow", "素描"))
        self.action_Y.setText(_translate("MainWindow", "油漆"))
        self.action_Y.setToolTip(_translate("MainWindow", "油漆"))
        self.action_M.setText(_translate("MainWindow", "毛玻璃"))
        self.action_M.setToolTip(_translate("MainWindow", "毛玻璃"))
        self.action_L.setText(_translate("MainWindow", "滤镜"))
        self.action_L.setToolTip(_translate("MainWindow", "滤镜"))
        self.action_M_2.setText(_translate("MainWindow", "马赛克"))
        self.action_M_2.setToolTip(_translate("MainWindow", "马赛克"))
        self.action_X.setText(_translate("MainWindow", "旋转"))
        self.action_X.setToolTip(_translate("MainWindow", "旋转"))
        self.action_F.setText(_translate("MainWindow", "浮雕"))
        self.action_F.setToolTip(_translate("MainWindow", "浮雕"))
        self.action_G.setText(_translate("MainWindow", "流年"))
        self.action_G.setToolTip(_translate("MainWindow", "流年"))
        self.action_J.setText(_translate("MainWindow", "均值滤波"))
        self.action_J.setToolTip(_translate("MainWindow", "均值滤波"))
        self.action_Gao.setText(_translate("MainWindow", "高斯滤波"))
        self.action_Gao.setToolTip(_translate("MainWindow", "高斯滤波"))
        self.action_Y_2.setText(_translate("MainWindow", "怀旧"))
        self.action_Y_2.setToolTip(_translate("MainWindow", "怀旧"))
        self.action_kai.setText(_translate("MainWindow", "开运算"))
        self.action_kai.setToolTip(_translate("MainWindow", "开运算"))
        self.action_bi.setText(_translate("MainWindow", "闭运算"))
        self.action_bi.setToolTip(_translate("MainWindow", "闭运算"))
        self.action_fu.setText(_translate("MainWindow", "腐蚀"))
        self.action_fu.setToolTip(_translate("MainWindow", "腐蚀"))
        self.action_peng.setText(_translate("MainWindow", "膨胀"))
        self.action_peng.setToolTip(_translate("MainWindow", "膨胀"))
        self.action_bian.setText(_translate("MainWindow", "边缘检测"))
        self.action_bian.setToolTip(_translate("MainWindow", "边缘检测"))
        self.action_ti.setText(_translate("MainWindow", "梯度算法"))
        self.action_ti.setToolTip(_translate("MainWindow", "梯度算法"))
        self.action_zeng.setText(_translate("MainWindow", "增加噪声"))
        self.action_zeng.setToolTip(_translate("MainWindow", "增加噪声"))
        self.action_bo.setText(_translate("MainWindow", "傅里叶变换"))
        self.action_bo.setToolTip(_translate("MainWindow", "傅里叶变换"))
        self.action_nibo.setText(_translate("MainWindow", "逆傅里叶变换"))
        self.action_nibo.setToolTip(_translate("MainWindow", "逆傅里叶变换"))
        self.action_O_2.setText(_translate("MainWindow", "打开(&O)"))
        self.action_O_2.setToolTip(_translate("MainWindow", "打开(O)"))
        self.action_O_2.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.action_B_2.setText(_translate("MainWindow", "保存(&B)"))
        self.action_B_2.setToolTip(_translate("MainWindow", "保存(B)"))
        self.action_B_2.setShortcut(_translate("MainWindow", "Ctrl+B"))
        self.actionkaiyuns.setText(_translate("MainWindow", "开运算"))
        self.actionbiyuns.setText(_translate("MainWindow", "闭运算"))
        self.actionju.setText(_translate("MainWindow", "均值滤波"))
        self.actiongao.setText(_translate("MainWindow", "高斯滤波"))
        self.actionfu.setText(_translate("MainWindow", "腐蚀"))
        self.actionpeng.setText(_translate("MainWindow", "膨胀"))
        self.actionbian.setText(_translate("MainWindow", "边缘检测"))
        self.actionti.setText(_translate("MainWindow", "梯度运算"))
        self.actionzeng.setText(_translate("MainWindow", "增加噪声"))
        self.actionbo.setText(_translate("MainWindow", "傅里叶变换"))
        self.actionnibo.setText(_translate("MainWindow", "逆傅里叶变换"))
        self.actionerzhihua.setText(_translate("MainWindow", "二值化"))
        self.actionkoutu.setText(_translate("MainWindow", "抠图"))
        self.actionbangzhu.setText(_translate("MainWindow", "帮助"))
    def faceRecognition(self):
        try:
            self.label_2.setScaledContents(True)
            # 读取图片
            img = cv2.imread(self.path)
            img = cv2.resize(img, (240, 240), interpolation=cv2.INTER_CUBIC)
            gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
            gradX = cv2.Sobel(gray, ddepth=cv2.CV_32F, dx=1, dy=0, ksize=-1)
            gradY = cv2.Sobel(gray, ddepth=cv2.CV_32F, dx=0, dy=1, ksize=-1)
            # subtract the y-gradient from the x-gradient
            gradient = cv2.subtract(gradX, gradY)
            gradient = cv2.convertScaleAbs(gradient)
            blurred = cv2.blur(gradient, (9, 9))
            (_, thresh) = cv2.threshold(blurred, 90, 255, cv2.THRESH_BINARY)
            kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (25, 25))
            closed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
            # perform a series of erosions and dilations
            closed = cv2.erode(closed, None, iterations=4)
            closed = cv2.dilate(closed, None, iterations=4)
            (cnts, _) = cv2.findContours(closed.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            c = sorted(cnts, key=cv2.contourArea, reverse=True)[0]
            # compute the rotated bounding box of the largest contour
            rect = cv2.minAreaRect(c)
            box = np.int0(cv2.boxPoints(rect))
            # draw a bounding box arounded the detected barcode and display the image
            cv2.drawContours(img, [box], -1, (0, 255, 0), 3)
            h, w = img.shape[:2]  # 获取图像的长和宽
            qimg = QImage(img, w, h, QImage.Format_BGR888)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择照片！")
    def openImage(self):
        #打开一张图片
        # 通过getOpenFileName打开对话框获取一张图片
        try:
        #定义文件读取函数，解决中文路径读取错误的问题
            self.path,ret=QFileDialog.getOpenFileName(None,"打开图片",".","图片格式(*.jpg *.png)")
        #把图片转换成BASE64编码
            self.label.setPixmap(QPixmap(self.path))
            self.label_2.clear()
        except:
            print("")

    def create_thread(self):
        self.detectThread=detect_thread(self.progressBar,self.label_3)
        self.detectThread.start()

    def imageToGray(self):#灰度处理
        try:
            self.label_2.setScaledContents(True)
            img = cv2.imread(self.path)
            img = cv2.resize(img, (240, 240), interpolation=cv2.INTER_CUBIC)
            self.create_thread()
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            self.detectThread.quit()
            height, width = gray.shape[:2]
            qimg = QImage(gray.data, width, height,QImage.Format_Grayscale8)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")
    
    def imageTogray(self):#通过原理实现灰度处理
        try:
            self.label_2.setScaledContents(True)
            img = cv2.imread(self.path)
            img = cv2.resize(img, (240, 240), interpolation=cv2.INTER_CUBIC)
            height, width = img.shape[:2]
            gray = np.zeros((height, width, 1), dtype="uint8")
            self.create_thread()
            for i in range(height):
                for j in range(width):
                    gray[i][j]=img[i][j][0]*0.114+img[i][j][1]*0.587+img[i][j][2]*0.299 #加权值法
                if i % int(height /100) == 0:
                    self.detectThread.timerEvent()
            self.detectThread.quit()
            height, width = gray.shape[:2]
            qimg = QImage(gray, width, height,QImage.Format_Grayscale8)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")
    
    def paint(self):#油漆
        try:
            self.label_2.setScaledContents(True)
            img = cv2.imread(self.path)
            
            img = cv2.resize(img, (240, 240), interpolation=cv2.INTER_CUBIC)
            # 图像灰度处理
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            # 自定义卷积核
            kernel = np.array([[-1, -1, -1], [-1, 10, -1], [-1, -1, -1]])
            # 图像油漆效果
            output = cv2.filter2D(gray, -1, kernel)
            height, width = output.shape[:2]
            qimg = QImage(output.data, width, height,QImage.Format_Grayscale8)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")
    
    def Ground_glass(self):#毛玻璃
        try:
            self.label_2.setScaledContents(True)
            img = cv2.imread(self.path)
            img = cv2.resize(img, (240, 240), interpolation=cv2.INTER_CUBIC)
            # 新建目标图像
            dst = np.zeros_like(img)
            # 获取图像行和列
            rows, cols = img.shape[:2]
            # 定义偏移量和随机数
            offsets = 5
            random_num = 0
            self.create_thread()
            # 毛玻璃效果: 像素点邻域内随机像素点的颜色替代当前像素点的颜色
            for y in range(rows - offsets):
                for x in range(cols - offsets):
                    random_num = np.random.randint(0, offsets)
                    dst[y, x] = img[y + random_num, x + random_num]
                if y % (int((rows - offsets) / 100)) == 0:
                    self.detectThread.timerEvent()
            self.detectThread.quit()
            height, width = dst.shape[:2]
            qimg = QImage(dst, width, height, QImage.Format_BGR888)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")
    
    def relief(self):#浮雕
        try:
            self.label_2.setScaledContents(True)
            img = cv2.imread(self.path)
            img = cv2.resize(img, (240, 240), interpolation=cv2.INTER_CUBIC)
            # 获取图像的高度和宽度
            height, width = img.shape[:2]
            # 图像灰度处理
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            # 创建目标图像
            dstImg = np.zeros((height, width, 1), np.uint8)
            self.create_thread()
            # 浮雕特效算法：newPixel = grayCurrentPixel - grayNextPixel + 150
            for i in range(0, height):
                for j in range(0, width - 1):
                    grayCurrentPixel = int(gray[i, j])
                    grayNextPixel = int(gray[i, j + 1])
                    newPixel = grayCurrentPixel - grayNextPixel + 150
                    if newPixel > 255:
                        newPixel = 255
                    if newPixel < 0:
                        newPixel = 0
                    dstImg[i, j] = newPixel
                if i % (int(height / 100)) == 0:
                    self.detectThread.timerEvent()
            self.detectThread.quit()
            qimg = QImage(dstImg, width, height, QImage.Format_Grayscale8)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")
    
    def Nostalgia(self):#怀旧
        try:
            self.label_2.setScaledContents(True)
            img1 = cv2.imread(self.path)
            img=cv2.resize(img1,(240,240),interpolation=cv2.INTER_CUBIC)
            rows, cols = img.shape[:2]
            # 新建目标图像
            img1 = np.zeros((rows, cols, 3), dtype="uint8")
            # 图像怀旧特效
            self.create_thread()
            for i in range(rows):
                for j in range(cols):
                    B = 0.272 * img[i, j][2] + 0.534 * img[i, j][1] + 0.131 * img[i, j][0]
                    G = 0.349 * img[i, j][2] + 0.686 * img[i, j][1] + 0.168 * img[i, j][0]
                    R = 0.393 * img[i, j][2] + 0.769 * img[i, j][1] + 0.189 * img[i, j][0]
                    if B > 255:
                        B = 255
                    if G > 255:
                        G = 255
                    if R > 255:
                        R = 255
                    img1[i, j] = np.uint8((B, G, R))
                if i%(int(rows/100))==0:
                    self.detectThread.timerEvent()
            self.detectThread.quit()
            height, width = img1.shape[:2]
            qimg = QImage(img1, width, height, QImage.Format_BGR888)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")

    def rotate(self):#旋转
        try:
            self.label_2.setScaledContents(True)
            # 读取图片
            img = cv2.imread(self.path)
            img = cv2.resize(img, (240, 240), interpolation=cv2.INTER_CUBIC)
            # 原图的高、宽 以及通道数
            rows, cols, channel = img.shape
            # 绕图像的中心旋转
            # 参数：旋转中心 旋转度数 scale
            M = cv2.getRotationMatrix2D((cols / 2, rows / 2), self.angle, 1)
            # 参数：原始图像 旋转参数 元素图像宽高
            rotated = cv2.warpAffine(img, M, (cols, rows))
            height, width = rotated.shape[:2]
            qimg = QImage(rotated, width, height, QImage.Format_BGR888)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
            self.angle=self.angle+90
            if self.angle==360:
                self.angle=0
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")
    
    #流年
    def fleetingTime(self):
        try:
            self.label_2.setScaledContents(True)
            # 读取原始图像
            img = cv2.imread(self.path)
            img = cv2.resize(img, (240, 240), interpolation=cv2.INTER_CUBIC)
            # 获取图像行和列
            rows, cols = img.shape[:2]
            # 新建目标图像
            dst = np.zeros((rows, cols, 3), dtype="uint8")
            self.create_thread()
            # 图像流年特效
            for i in range(rows):
                for j in range(cols):
                    # B通道的数值开平方乘以参数12
                    B = math.sqrt(img[i, j][0]) * 12
                    G = img[i, j][1]
                    R = img[i, j][2]
                    if B > 255:
                        B = 255
                    dst[i, j] = np.uint8((B, G, R))
                if i % (int(rows / 100)) == 0:
                    self.detectThread.timerEvent()
            self.detectThread.quit()
            h, w = dst.shape[:2]  # 获取图像的长和宽
            qimg = QImage(dst, w, h, QImage.Format_BGR888)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")

    # 获取滤镜颜色
    def getBGR(self, img, table, i, j):
        # 获取图像颜色
        b, g, r = img[i][j]
        # 计算标准颜色表中颜色的位置坐标
        x = int(g / 4 + int(b / 32) * 64)
        y = int(r / 4 + int((b % 32) / 4) * 64)
        # 返回滤镜颜色表中对应的颜色
        return table[x][y]
    #滤镜
    def Filter(self):
        try:
            self.label_2.setScaledContents(True)
            # 读取原始图像
            img = cv2.imread(self.path)
            img = cv2.resize(img, (240, 240), interpolation=cv2.INTER_CUBIC)
            lj_map = cv2.imread('C:/Users/86150/Desktop/UI/ImageManagement/1.jpg')
            # 获取图像行和列
            rows, cols = img.shape[:2]
            # 新建目标图像
            dst = np.zeros((rows, cols, 3), dtype="uint8")
            # 循环设置滤镜颜色
            self.create_thread()
            for i in range(rows):
                for j in range(cols):
                    dst[i][j] = self.getBGR(img, lj_map, i, j)
                if i % (int(rows / 100)) == 0:
                    self.detectThread.timerEvent()
            self.detectThread.quit()
            h, w = dst.shape[:2]  # 获取图像的长和宽
            qimg = QImage(dst, w, h, QImage.Format_BGR888)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")

    #马赛克处理
    def Mosaic(self):
        try:
            self.label_2.setScaledContents(True)
            # 读取原始图像
            im = cv2.imread(self.path)
            im = cv2.resize(im, (751, 551), interpolation=cv2.INTER_CUBIC)
            # 设置鼠标左键开启
            en = False
            # 鼠标事件
            def draw(event, x, y, flags, param):
                global en
                # 鼠标左键按下开启en值
                if event == cv2.EVENT_LBUTTONDOWN:
                    en = True
                # 鼠标左键按下并且移动
                elif event == cv2.EVENT_MOUSEMOVE and flags == cv2.EVENT_LBUTTONDOWN:
                    # 调用函数打马赛克
                    if en:
                        drawMask(y, x)
                    # 鼠标左键弹起结束操作
                    elif event == cv2.EVENT_LBUTTONUP:
                        en = False
            # 图像局部采样操作
            def drawMask(x, y, size=10):
                # size*size采样处理
                m = int(x / size * size)
                n = int(y / size * size)
                # 10*10区域设置为同一像素值
                for i in range(size):
                    for j in range(size):
                        im[m + i][n + j] = im[m][n]
            # 打开对话框
            cv2.namedWindow('Mosaic')
            # 调用draw函数设置鼠标操作
            cv2.setMouseCallback('Mosaic', draw)
            # 循环处理
            while (1):
                cv2.imshow('Mosaic',im)
                # 按ESC键退出
                if cv2.waitKey(10) & 0xFF == 27:
                    cv2.destroyAllWindows()
                    break
                # 按s键保存图片
                elif cv2.waitKey(10) & 0xFF == 115:
                    im = cv2.resize(im, (751, 551), interpolation=cv2.INTER_CUBIC)
                    h, w = im.shape[:2]  # 获取图像的长和宽
                    qimg = QImage(im, w, h,w*3, QImage.Format_BGR888)
                    qpix = QPixmap.fromImage(qimg)
                    self.label_2.setPixmap(qpix)
                    # 退出窗口
                    cv2.destroyAllWindows()
                    break
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")

    def save_image(self):#图片保存
        try:
            path, ret = QFileDialog.getSaveFileName(None, "选择保存文件路径", ".", "图片格式(*.jpg *.png)")
            img = self.label_2.pixmap().toImage()
            img.save(path, "JPG", 100)
            if path!="":
                QMessageBox.about(self, "提示", "图片保存成功！")
        except:
            print("")
    
    def meanFiltering1(self, img,size): #img输入，size均值滤波器的尺寸，>=3，且必须为奇数
        num = int((size - 1) / 2)  # 输入图像需要填充的尺寸
        img = cv2.copyMakeBorder(img, num, num, num, num, cv2.BORDER_REPLICATE)
        h1, w1 = img.shape[0:2]
        # 高斯滤波
        img1 = np.zeros((h1, w1, 3), dtype="uint8") #定义空白图像，用于输出中值滤波后的结果
        #img1 = cv2.copyMakeBorder(img1, num, num, num, num, cv2.BORDER_REPLICATE)
        self.create_thread() #创建进度条线程
        for i in range(num, h1-num):
            for j in range(num, w1-num):
                sum=0
                sum1=0
                sum2=0
                for k in range(i-num,i+num+1):  #求中心像素周围size*size区域内的像素的平均值
                    for l in range(j-num,j+num+1):
                        sum=sum+img[k,l][0]
                        sum1=sum1+img[k,l][1]
                        sum2=sum2+img[k,l][2]
                sum=sum/(size**2)
                sum1 = sum1/(size**2)
                sum2 = sum2/(size**2)
                img1[i, j]=[sum,sum1,sum2]
            if i % (int((h1-num*2)/100)) == 0:
                self.detectThread.timerEvent()
        self.detectThread.quit()
        img1=img1[(0+num):(h1-num),(0+num):(h1-num)]
        return img1

    #均值滤波
    def meanFiltering(self):
        try:
            self.label_2.setScaledContents(True)
            # 读取图片
            img = cv2.imread(self.path)
            img = cv2.resize(img, (240, 240), interpolation=cv2.INTER_CUBIC)
            # 均值滤波
            # result = cv2.blur(img, (5, 5)) #库函数调用
            result=self.meanFiltering1(img,5) #自定义均值滤波函数调用
            result=cv2.cvtColor(result,cv2.COLOR_BGR2RGB)
            height, width = result.shape[:2]
            qimg = QImage(result, width, height, QImage.Format_RGB888)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")

    # def GaussianFiltering(self):
    #     try:
    #         self.label_2.setScaledContents(True)
    #         img=cv2.imread(self.path)
    #         img = cv2.resize(img, (240, 240), interpolation=cv2.INTER_CUBIC)
    #         # self.create_thread()
    #         img=cv2.GaussianBlur(img,(5,5),0,0)
    #         # self.detectThread.quit()
    #         img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
    #         height, width = img.shape[:2]
    #         qimg = QImage(img, width, height, QImage.Format_Grayscale8)
    #         qpix = QPixmap.fromImage(qimg)
    #         self.label_2.setPixmap(qpix)
    #     except:
    #         QMessageBox.about(self, "提示", "请先选择图片！")

    #计算高斯卷积核
    def gausskernel(self,size):
        sigma = 1.0
        gausskernel = np.zeros((size, size), np.float32)
        for i in range(size):
            for j in range(size):
                norm = math.pow(i - 1, 2) + pow(j - 1, 2)
                gausskernel[i, j] = math.exp(-norm / (2 * math.pow(sigma, 2)))  # 求高斯卷积
        sum = np.sum(gausskernel)  # 求和
        kernel=gausskernel/sum # 归一化
        return kernel
    #自定义高斯滤波函数
    def Gaussian(self,img,size):
        num = int((size - 1) / 2)  # 输入图像需要填充的尺寸
        img = cv2.copyMakeBorder(img, num, num, num, num, cv2.BORDER_REPLICATE)
        h, w = img.shape[0:2]  # 获取输入图像的长宽和高
        # 高斯滤波
        img1 = np.zeros((h, w, 3), dtype="uint8")
        kernel = self.gausskernel(size)  # 计算高斯卷积核
        self.create_thread()
        for i in range(num, h - num):
            for j in range(num, w - num):
                sum = 0
                q=0
                p=0
                for k in range(i-num, i+num+1):
                    for l in range(j-num, j+num+1):
                        sum = sum + img[k,l] * kernel[q,p]  # 高斯滤波
                        p=p+1 #进行高斯核的列计数
                    q=q+1 #进行高斯核的行计数
                    p=0#内层循环执行完毕，将列计数为0，下次循环便可以再次从0开始
                img1[i, j] = sum
            if i % (int((h - num * 2) / 100)) == 0:
                self.detectThread.timerEvent()
        self.detectThread.quit()
        img1 = img1[(0 + num):(h-num), (0+num):(h-num)]
        return img1
    #高斯滤波调用
    def GaussianFiltering(self):
        try:
            self.label_2.setScaledContents(True)
            #读取图片
            img = cv2.imread(self.path)
            img = cv2.resize(img, (240, 240), interpolation=cv2.INTER_CUBIC)
            #自定义高斯滤波函数
            img1=self.Gaussian(img,5)
            img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)
            h,w=img1.shape[0:2]
            qimg = QImage(img1, w, h, QImage.Format_RGB888)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")

    #开运算
    def open(self):
        try:
            self.label_2.setScaledContents(True)
            # 读取图片
            src = cv2.imread(self.path)
            src = cv2.resize(src, (240, 240), interpolation=cv2.INTER_CUBIC)
            #gray = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)
            # 设置卷积核
            kernel = np.ones((5, 5), np.uint8)
            # 图像开运算
            result = cv2.morphologyEx(src, cv2.MORPH_OPEN, kernel)
            h, w = result.shape[:2]  # 获取图像的长和宽
            qimg = QImage(result, w, h, QImage.Format_BGR888)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self,"提示","请先选择图片！")
    
    #闭运算
    def close(self):
        try:
            self.label_2.setScaledContents(True)
            # 读取图片
            src = cv2.imread(self.path)
            src = cv2.resize(src, (240, 240), interpolation=cv2.INTER_CUBIC)
            #gray = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)
            # 设置卷积核
            kernel = np.ones((10, 10), np.uint8)
            # 图像闭运算
            result = cv2.morphologyEx(src, cv2.MORPH_CLOSE, kernel)
            h, w = result.shape[:2]  # 获取图像的长和宽
            qimg = QImage(result, w, h, QImage.Format_BGR888)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")

    #腐蚀
    def erode(self):
        try:
            self.label_2.setScaledContents(True)
            # 读取图片
            src = cv2.imread(self.path)
            src = cv2.resize(src, (240, 240), interpolation=cv2.INTER_CUBIC)
            #gray = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)
            # 设置卷积核
            kernel = np.ones((5, 5), np.uint8)
            # 图像腐蚀处理
            erosion = cv2.erode(src, kernel)
            erosion = cv2.erode(erosion, kernel)
            h, w = erosion.shape[:2]  # 获取图像的长和宽
            qimg = QImage(erosion, w, h, QImage.Format_BGR888)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")
    
    #膨胀
    def dilate(self):
        try:
            self.label_2.setScaledContents(True)
            # 读取图片
            src = cv2.imread(self.path)
            src = cv2.resize(src, (240, 240), interpolation=cv2.INTER_CUBIC)
            #gray = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)
            # 设置卷积核
            kernel = np.ones((5, 5), np.uint8)
            # 图像膨胀处理
            erosion = cv2.dilate(src, kernel)
            erosion = cv2.dilate(erosion, kernel)
            h, w = erosion.shape[:2]  # 获取图像的长和宽
            qimg = QImage(erosion, w, h, QImage.Format_BGR888)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")

    #边缘提取
    def Canny(self):
        try:
            self.label_2.setScaledContents(True)
            # 读取图像
            img = cv2.imread(self.path)
            img = cv2.resize(img, (240, 240), interpolation=cv2.INTER_CUBIC)
            # 灰度化处理图像
            grayImage = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            # 高斯滤波降噪
            gaussian = cv2.GaussianBlur(grayImage, (3, 3), 0)
            # Canny算法
            Canny = cv2.Canny(gaussian, 50, 150)
            h, w = Canny.shape[:2]  # 获取图像的长和宽
            qimg = QImage(Canny, w, h, QImage.Format_Grayscale8)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")        
    
    def gray(self,img):
        height, width = img.shape[:2]
        gray = np.zeros((height, width, 1), dtype="uint8")
        for i in range(height):
            for j in range(width):
                gray[i][j] = img[i][j][0] * 0.114 + img[i][j][1] * 0.587 + img[i][j][2] * 0.299  # 加权值法
        return gray
    
    def Sketch(self):#素描
        try:
            self.label_2.setScaledContents(True)
            img = cv2.imread(self.path)
            img = cv2.resize(img, (240, 240), interpolation=cv2.INTER_CUBIC)
            # 图像灰度处理
            gray = self.gray(img)
            # 高斯滤波降噪
            gaussian = cv2.GaussianBlur(gray, (5, 5), 0)
            gaussian =self.Gaussian(img,5)
            # Canny算子
            canny = cv2.Canny(gaussian, 50, 150)
            # 阈值化处理
            ret, result = cv2.threshold(canny, 100, 255, cv2.THRESH_BINARY_INV)
            height, width = result.shape[:2]
            qimg = QImage(result, width, height, QImage.Format_Grayscale8)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")

    # 梯度运算
    def gradient(self):
        try:
            self.label_2.setScaledContents(True)
            # 读取图片
            src = cv2.imread(self.path)
            src = cv2.resize(src, (240, 240), interpolation=cv2.INTER_CUBIC)
            #gray = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)
            # 高斯滤波处理
            src=cv2.GaussianBlur(src,(0,0),1)
            # 图像梯度运算
            result = cv2.Laplacian(src,cv2.CV_32F,ksize=3,delta=127)
            result=cv2.convertScaleAbs(result)
            h, w = result.shape[:2]  # 获取图像的长和宽
            qimg = QImage(result, w, h, QImage.Format_BGR888)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")

    def noise(self):#增加噪声
        try:
            self.label_2.setScaledContents(True)
            img=cv2.imread(self.path)
            img=cv2.resize(img, (240, 240), interpolation=cv2.INTER_CUBIC)
            self.create_thread()
            img_noise=np.zeros(img.shape,dtype=np.uint8)
            thred=0.1
            # self.create_thread()
            for i in range(img.shape[0]):
                for j in range(img.shape[1]):
                    ratio=np.random.rand()
                    if ratio<thred:
                        img_noise[i,j]=255
                    else:
                        img_noise[i,j]=img[i,j]
            # self.detectThread.quit()
            h, w = img_noise.shape[:2]  # 获取图像的长和宽
            self.detectThread.quit()
            zimg = QImage(img_noise, w, h, QImage.Format_BGR888)
            qpix = QPixmap.fromImage(zimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")
    
    #自定义傅里叶变换函数
    def dft(self,img):
        H, W, channel = img.shape
        # Prepare DFT coefficient
        G = np.zeros((H, W, channel), dtype=np.complex)
        # prepare processed index corresponding to original image positions
        x = np.tile(np.arange(W), (H, 1))
        y = np.arange(H).repeat(W).reshape(H, -1)
        self.create_thread()
        # dft
        # pragma omp parallel for
        for c in range(channel):
            for v in range(H):
                for u in range(W):
                    G[v, u, c] = np.sum(img[..., c] * np.exp(-2j * np.pi * (x * u / W + y * v / H))) / np.sqrt(H * W)
                if v % (int(H / 100)) == 0:
                    self.detectThread.timerEvent()
        self.detectThread.quit()
        return G
    #傅里叶变换
    def FourierTransform(self):
        try:
            self.label_2.setScaledContents(True)
            # 读取图片
            img = cv2.imread(self.path)
            img = cv2.resize(img, (100, 100), interpolation=cv2.INTER_CUBIC)
            # 傅里叶库函数调用
            #dft = cv2.dft(np.float32(img), flags=cv2.DFT_COMPLEX_OUTPUT)
            #dftshift = np.fft.fftshift(dft)
            #res1 = 20 * np.log(cv2.magnitude(dftshift[:, :, 0], dftshift[:, :, 1]))
            # 自定义傅里叶变换函数调用
            self.result5 = self.dft(img)
            fshift = np.fft.fftshift(self.result5)
            fimg = np.log(np.abs(fshift))
            plt.imshow(fimg, 'gray')
            plt.axis('off')
            plt.savefig("f.png", bbox_inches='tight', pad_inches=0)
            self.label_2.setPixmap(QPixmap("f.png"))
            os.remove("f.png")
        except:
            QMessageBox.about(self, "提示", "请先选择图片！")
    #自定义傅里叶反变换函数
    def idft(self,G):
        # prepare out image
        H, W, channel = G.shape
        out = np.zeros((H, W, channel), dtype=np.float32)
        # 准备与原始图像位置相对应的处理索引
        x = np.tile(np.arange(W), (H, 1))
        y = np.arange(H).repeat(W).reshape(H, -1)
        self.create_thread()
        # idft
        for c in range(channel):
            for v in range(H):
                for u in range(W):
                    out[v, u, c] = np.abs(np.sum(G[..., c] * np.exp(2j * np.pi * (x * u / W + y * v / H)))) / np.sqrt(W * H)
                if v % (int(H / 100)) == 0:
                    self.detectThread.timerEvent()
        self.detectThread.quit()
        # clipping
        out = np.clip(out, 0, 255)
        out = out.astype(np.uint8)
        return out
    #傅里叶反变换
    def inFourierTransform(self):
        try:
            self.label_2.setScaledContents(True)
            # 傅里叶库函数调用
            #ishift = np.fft.ifftshift(self.result5)
            #iimg = cv2.idft(ishift)
            #res2 = cv2.magnitude(iimg[:, :, 0], iimg[:, :, 1])
            # 自定义傅里叶反变换函数调用
            result = self.idft(self.result5)
            h, w = result.shape[:2]  # 获取图像的长和宽
            qimg = QImage(result, w, h, QImage.Format_BGR888)
            qpix = QPixmap.fromImage(qimg)
            self.label_2.setPixmap(qpix)
        except:
            QMessageBox.about(self, "提示", "请先进行傅里叶变换！")
    
    #选择图像为二值化模式
    def change(self):
        self.label_2.setScaledContents(True)
        img=cv2.imread(self.path)
        img=cv2.resize(img, (751, 551), interpolation=cv2.INTER_CUBIC)
        img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
        #二值化，需要注意的是，必须按"q"或者"Esc"退出
        #设置窗口
        cv2.namedWindow('imgBin')
        #定义回调函数
        def nothing(x):
            pass
        #创建滑动条，控制threshold
        cv2.createTrackbar('threshold','imgBin',0,255,nothing)
        while(1):
            #返回滑动条所在位置的值
            threshold=cv2.getTrackbarPos('threshold','imgBin')
            #二值化处理 
            ret, imgBin = cv2.threshold(img.copy() ,threshold, 255, cv2.THRESH_BINARY)  
            #显示图片
            cv2.imshow('imgBin',imgBin)
            if cv2.waitKey(1)==ord('q') or cv2.waitKey(1)==27:  #按q或Esc退出
                break
        cv2.destroyAllWindows()
        res = cv2.resize(imgBin, (751, 551), interpolation=cv2.INTER_CUBIC)
        self.img2 = cv2.cvtColor(res, cv2.COLOR_BGR2RGB)  # opencv读取的bgr格式图片转换成rgb格式
        _image = QtGui.QImage(self.img2[:], self.img2.shape[1], self.img2.shape[0], self.img2.shape[1] * 3,
                              QtGui.QImage.Format_RGB888)  # pyqt5转换成自己能放的图片格式
        jpg_out = QtGui.QPixmap(_image)  # 转换成QPixmap
        self.label_2.setPixmap(jpg_out)
        
    def grabCut(self):
        self.label_2.setScaledContents(True)
        img=cv2.imread(self.path)
        img=cv2.resize(img, (751, 551), interpolation=cv2.INTER_CUBIC)
        # r=cv2.namedWindow('Mosaic')
        r = cv2.selectROI('input', img, False)  # 返回 (x_min, y_min, w, h)
        # roi区域
        roi = img[int(r[1]):int(r[1]+r[3]), int(r[0]):int(r[0]+r[2])]
        imgnew = img.copy()
        cv2.rectangle(imgnew, (int(r[0]), int(r[1])),(int(r[0])+int(r[2]), int(r[1])+ int(r[3])), (255, 0, 0), 2)
        # 原图mask
        mask = np.zeros(img.shape[:2], dtype=np.uint8)
        rect = (int(r[0]), int(r[1]), int(r[2]), int(r[3])) # 包括前景的矩形，格式为(x,y,w,h)
        bgdmodel = np.zeros((1,65),np.float64) # bg模型的临时数组  13 * iterCount
        fgdmodel = np.zeros((1,65),np.float64) # fg模型的临时数组  13 * iterCount
        cv2.grabCut(img,mask,rect,bgdmodel,fgdmodel, 11, mode=cv2.GC_INIT_WITH_RECT)
        # 提取前景和可能的前景区域
        mask2 = np.where((mask==1) + (mask==3), 255, 0).astype('uint8')
        result = cv2.bitwise_and(img,img,mask=mask2)
        # 打开对话框
        # cv2.namedWindow('Mosaic')
        # cv2.imshow('Cut',result)
        if cv2.waitKey(1)==ord('q') or cv2.waitKey(1)==32:  #按q或空格键退出
            cv2.destroyAllWindows()
        result=cv2.resize(result, (751, 551), interpolation=cv2.INTER_CUBIC)
        h, w = result.shape[:2]  # 获取图像的长和宽
        qimg = QImage(result, w, h,w*3, QImage.Format_BGR888)
        qpix = QPixmap.fromImage(qimg)
        self.label_2.setPixmap(qpix)
               
    
                
        




if __name__ == "__main__":
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
